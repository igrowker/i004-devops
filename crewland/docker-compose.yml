version: '3.8'

services:
  # Servicio Posgress
  postgres:
    image: postgres:latest
    container_name: crewland-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_scripts/custom-entrypoint.sh:/docker-entrypoint-initdb.d/custom-entrypoint.sh
    networks:
      - crewland-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servicio backend (Node.js)
  backend:
    build:
      context: ./cloned-repos/i004-crewland-back
      dockerfile: Dockerfile.dev
    container_name: crewland-backend
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./cloned-repos/i004-crewland-back:/app
      - /app/node_modules
    networks:
      - crewland-network

  # Servicio frontend (React)
  frontend:
    build:
      context: ./cloned-repos/i004-crewland-front
      dockerfile: Dockerfile.dev
    container_name: crewland-frontend
    ports:
      - "80:3000" 
    depends_on:
      - backend 
    networks:
      - crewland-network
    volumes:
      - ./cloned-repos/i004-crewland-front:/app
      - /app/node_modules

networks:
  crewland-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
    
